#!/bin/bash

TOOVERWRITE=

clean()
{
	echo -n "...deleting intermediate vector files..."
	find "$SRC_DIR" -iname '*.vec' -print0 | xargs -0 -r --max-args 500 rm -f 
	echo "Done"
}

clean_log()
{
	echo -n "...deleting vgen logs..."
	find "$TIME_DIR" -iname 'vgen_*' -print0 | xargs -0 -r --max-args 500 rm -f 
	echo "Done"
	echo -n "...deleting vector db files..."
	find "$VECTOR_DIR" -iname 'vdb_*' -print0 | xargs -0 -r --max-args 500 rm -f 
	echo "Done"
}

#vgen $1 $2: $1=min_token; $2=stride
vgen()
{
	if (($# != 2));
	then
		return 1
	fi

	echo -n "$FUNCNAME: $1 $2 ..."  # FUNCNAME: the current function name; maintained by Bash
	if [[ "$TOOVERWRITE" != "true" && -s "$VECTOR_DIR/vdb_$1_$2" ]];
	then
	  echo
	  echo "Warning: Vec file $VECTOR_DIR/vdb_$1_$2 exists. Delete it manually or use '$0 overwrite'."
	  echo "$FUNCNAME: $1 $2 ...Skip."
	else
	  echo -n > "$TIME_DIR/vgen_$1_$2"

#NOTE: "for .. in .." has trouble when a filename contains spaces; use "while read .." instead:
	  ( time \
	    find "$SRC_DIR" -iname "$FILE_PATTERN" | while read file;
#	    for file in `find $SRC_DIR/ -iname "$FILE_PATTERN"`;
	    do
		echo "Parsing $file" >> "$TIME_DIR/vgen_$1_$2"
		if [[ ! -s "${file}.vec" || "$TOOVERWRITE" = "true" ]];
		then
			"$VGEN_EXEC" -i "$file" -m $1 -t $2
		fi
	    done \
	  ) 1>>"$TIME_DIR/vgen_$1_$2" 2>&1

	  find "$SRC_DIR" -iname '*.vec' -print0 | xargs -0 --max-args=100 cat > "$VECTOR_DIR/vdb_$1_$2"
	  echo "Done. Log: $TIME_DIR/vgen_$1_$2"
        fi

	if [[ -s "$VECTOR_DIR/vdb_$1_$2" ]]; then
		return 0
	else
		return 1
	fi
}

# transform source code to html:
tohtml()
{
	  if ( which "$SRC2HTM_EXEC" >& /dev/null );
	  then
		  echo -n "Transforming source code to html..."
		  ( time \
		    find $SRC_DIR/ -iname "$FILE_PATTERN" | while read file;
	  	    do
			    if [[ ! -e "${file}.html" || "$TOOVERWRITE" = "true" ]];
			    then
				    echo "$SRC2HTM_EXEC $SRC2HTM_OPTS $file"
				    "$SRC2HTM_EXEC" "$SRC2HTM_OPTS" "$file"
			    fi
		    done \
		  ) 1>>"$TIME_DIR/$SRC2HTM_EXEC.log" 2>&1
		  echo "Done. Log: $TIME_DIR/$SRC2HTM_EXEC.log"
	  fi
}

. `dirname $0`/configure

if [[ $# -ge 1 ]]; then
	case "$1" in
		clean )
			clean
			exit $?
			;;
		clean_all )
			clean
			clean_log
			exit $?
		       	;;
		overwrite )
			TOOVERWRITE="true"
			;;
		* )
			echo "Usage: $0 [overwrite | clean | clean_all]"
			exit 1
			;;
	esac
fi

errcode=0
echo "$VGEN_EXEC $FILE_PATTERN"
echo 

for t in ${MIN_TOKENS};
do
	for s in ${STRIDE};
	do
		vgen $t $s
		retcode=$?
		if [[ $errcode -eq 0 ]]; then
			errcode=$retcode
		fi
		clean # remove .vec so not to intervene with the following vgens
		echo
	done
done

tohtml
exit $errcode

