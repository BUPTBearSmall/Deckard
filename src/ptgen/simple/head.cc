
#include <map>
#include <string>

using namespace std;

extern map<string,int> name2id;
extern map<int,string> id2name;

void id_init()
{

name2id["storage_class_specifier"]= 0;
id2name[0]= "storage_class_specifier";
name2id["expression_statement"]= 1;
id2name[1]= "expression_statement";
name2id["selection_statement"]= 2;
id2name[2]= "selection_statement";
name2id["unary_expression"]= 3;
id2name[3]= "unary_expression";
name2id["struct_or_union_specifier"]= 4;
id2name[4]= "struct_or_union_specifier";
name2id["exclusive_or_expression"]= 5;
id2name[5]= "exclusive_or_expression";
name2id["initializer"]= 6;
id2name[6]= "initializer";
name2id["init_declarator_list"]= 7;
id2name[7]= "init_declarator_list";
name2id["struct_declaration_list"]= 8;
id2name[8]= "struct_declaration_list";
name2id["enumerator"]= 9;
id2name[9]= "enumerator";
name2id["declaration_list"]= 10;
id2name[10]= "declaration_list";
name2id["pointer"]= 11;
id2name[11]= "pointer";
name2id["and_expression"]= 12;
id2name[12]= "and_expression";
name2id["external_declaration"]= 13;
id2name[13]= "external_declaration";
name2id["type_specifier"]= 14;
id2name[14]= "type_specifier";
name2id["compound_statement"]= 15;
id2name[15]= "compound_statement";
name2id["inclusive_or_expression"]= 16;
id2name[16]= "inclusive_or_expression";
name2id["iteration_statement"]= 17;
id2name[17]= "iteration_statement";
name2id["type_name"]= 18;
id2name[18]= "type_name";
name2id["postfix_expression"]= 19;
id2name[19]= "postfix_expression";
name2id["additive_expression"]= 20;
id2name[20]= "additive_expression";
name2id["statement"]= 21;
id2name[21]= "statement";
name2id["unary_operator"]= 22;
id2name[22]= "unary_operator";
name2id["cast_expression"]= 23;
id2name[23]= "cast_expression";
name2id["initializer_list"]= 24;
id2name[24]= "initializer_list";
name2id["struct_declarator_list"]= 25;
id2name[25]= "struct_declarator_list";
name2id["logical_or_expression"]= 26;
id2name[26]= "logical_or_expression";
name2id["constant_expression"]= 27;
id2name[27]= "constant_expression";
name2id["relational_expression"]= 28;
id2name[28]= "relational_expression";
name2id["struct_or_union"]= 29;
id2name[29]= "struct_or_union";
name2id["type_qualifier_list"]= 30;
id2name[30]= "type_qualifier_list";
name2id["struct_declaration"]= 31;
id2name[31]= "struct_declaration";
name2id["assignment_expression"]= 32;
id2name[32]= "assignment_expression";
name2id["parameter_type_list"]= 33;
id2name[33]= "parameter_type_list";
name2id["parameter_declaration"]= 34;
id2name[34]= "parameter_declaration";
name2id["multiplicative_expression"]= 35;
id2name[35]= "multiplicative_expression";
name2id["init_declarator"]= 36;
id2name[36]= "init_declarator";
name2id["argument_expression_list"]= 37;
id2name[37]= "argument_expression_list";
name2id["statement_list"]= 38;
id2name[38]= "statement_list";
name2id["primary_expression"]= 39;
id2name[39]= "primary_expression";
name2id["declaration_specifiers"]= 40;
id2name[40]= "declaration_specifiers";
name2id["declaration"]= 41;
id2name[41]= "declaration";
name2id["direct_declarator"]= 42;
id2name[42]= "direct_declarator";
name2id["logical_and_expression"]= 43;
id2name[43]= "logical_and_expression";
name2id["declarator"]= 44;
id2name[44]= "declarator";
name2id["shift_expression"]= 45;
id2name[45]= "shift_expression";
name2id["equality_expression"]= 46;
id2name[46]= "equality_expression";
name2id["jump_statement"]= 47;
id2name[47]= "jump_statement";
name2id["struct_declarator"]= 48;
id2name[48]= "struct_declarator";
name2id["function_definition"]= 49;
id2name[49]= "function_definition";
name2id["idlist"]= 50;
id2name[50]= "idlist";
name2id["parameter_list"]= 51;
id2name[51]= "parameter_list";
name2id["enum_specifier"]= 52;
id2name[52]= "enum_specifier";
name2id["type_qualifier"]= 53;
id2name[53]= "type_qualifier";
name2id["enumerator_list"]= 54;
id2name[54]= "enumerator_list";
name2id["labeled_statement"]= 55;
id2name[55]= "labeled_statement";
name2id["abstract_declarator"]= 56;
id2name[56]= "abstract_declarator";
name2id["specifier_qualifier_list"]= 57;
id2name[57]= "specifier_qualifier_list";
name2id["translation_unit"]= 58;
id2name[58]= "translation_unit";
name2id["assignment_operator"]= 59;
id2name[59]= "assignment_operator";
name2id["conditional_expression"]= 60;
id2name[60]= "conditional_expression";
name2id["direct_abstract_declarator"]= 61;
id2name[61]= "direct_abstract_declarator";
name2id["identifier_list"]= 62;
id2name[62]= "identifier_list";
name2id["expression"]= 63;
id2name[63]= "expression";
name2id["RIGHT_OP"]= 64;
id2name[64]= "RIGHT_OP";
name2id["SIGNED"]= 65;
id2name[65]= "SIGNED";
name2id["RETURN"]= 66;
id2name[66]= "RETURN";
name2id["SHORT"]= 67;
id2name[67]= "SHORT";
name2id["CONSTANT"]= 68;
id2name[68]= "CONSTANT";
name2id["'~'"]= 69;
id2name[69]= "'~'";
name2id["RIGHT_ASSIGN"]= 70;
id2name[70]= "RIGHT_ASSIGN";
name2id["DO"]= 71;
id2name[71]= "DO";
name2id["DEC_OP"]= 72;
id2name[72]= "DEC_OP";
name2id["OR_ASSIGN"]= 73;
id2name[73]= "OR_ASSIGN";
name2id["VOID"]= 74;
id2name[74]= "VOID";
name2id["DIV_ASSIGN"]= 75;
id2name[75]= "DIV_ASSIGN";
name2id["';'"]= 76;
id2name[76]= "';'";
name2id["CHAR"]= 77;
id2name[77]= "CHAR";
name2id["EXTERN"]= 78;
id2name[78]= "EXTERN";
name2id["WHILE"]= 79;
id2name[79]= "WHILE";
name2id["'%'"]= 80;
id2name[80]= "'%'";
name2id["EQ_OP"]= 81;
id2name[81]= "EQ_OP";
name2id["IF"]= 82;
id2name[82]= "IF";
name2id["'!'"]= 83;
id2name[83]= "'!'";
name2id["CONST"]= 84;
id2name[84]= "CONST";
name2id["SIZEOF"]= 85;
id2name[85]= "SIZEOF";
name2id["TYPE_NAME"]= 86;
id2name[86]= "TYPE_NAME";
name2id["']'"]= 87;
id2name[87]= "']'";
name2id["GOTO"]= 88;
id2name[88]= "GOTO";
name2id["CASE"]= 89;
id2name[89]= "CASE";
name2id["BREAK"]= 90;
id2name[90]= "BREAK";
name2id["LE_OP"]= 91;
id2name[91]= "LE_OP";
name2id["'^'"]= 92;
id2name[92]= "'^'";
name2id["REGISTER"]= 93;
id2name[93]= "REGISTER";
name2id["UNSIGNED"]= 94;
id2name[94]= "UNSIGNED";
name2id["OR_OP"]= 95;
id2name[95]= "OR_OP";
name2id["','"]= 96;
id2name[96]= "','";
name2id["DEFAULT"]= 97;
id2name[97]= "DEFAULT";
name2id["SWITCH"]= 98;
id2name[98]= "SWITCH";
name2id["'('"]= 99;
id2name[99]= "'('";
name2id["'.'"]= 100;
id2name[100]= "'.'";
name2id["PTR_OP"]= 101;
id2name[101]= "PTR_OP";
name2id["AUTO"]= 102;
id2name[102]= "AUTO";
name2id["AND_ASSIGN"]= 103;
id2name[103]= "AND_ASSIGN";
name2id["'*'"]= 104;
id2name[104]= "'*'";
name2id["'?'"]= 105;
id2name[105]= "'?'";
name2id["IDENTIFIER"]= 106;
id2name[106]= "IDENTIFIER";
name2id["'='"]= 107;
id2name[107]= "'='";
name2id["ADD_ASSIGN"]= 108;
id2name[108]= "ADD_ASSIGN";
name2id["'|'"]= 109;
id2name[109]= "'|'";
name2id["TYPEDEF"]= 110;
id2name[110]= "TYPEDEF";
name2id["'>'"]= 111;
id2name[111]= "'>'";
name2id["FOR"]= 112;
id2name[112]= "FOR";
name2id["UNION"]= 113;
id2name[113]= "UNION";
name2id["':'"]= 114;
id2name[114]= "':'";
name2id["ENUM"]= 115;
id2name[115]= "ENUM";
name2id["'{'"]= 116;
id2name[116]= "'{'";
name2id["ELLIPSIS"]= 117;
id2name[117]= "ELLIPSIS";
name2id["AND_OP"]= 118;
id2name[118]= "AND_OP";
name2id["GE_OP"]= 119;
id2name[119]= "GE_OP";
name2id["INLINE"]= 120;
id2name[120]= "INLINE";
name2id["LEFT_OP"]= 121;
id2name[121]= "LEFT_OP";
name2id["'}'"]= 122;
id2name[122]= "'}'";
name2id["ELSE"]= 123;
id2name[123]= "ELSE";
name2id["VOLATILE"]= 124;
id2name[124]= "VOLATILE";
name2id["'&'"]= 125;
id2name[125]= "'&'";
name2id["STRUCT"]= 126;
id2name[126]= "STRUCT";
name2id["SUB_ASSIGN"]= 127;
id2name[127]= "SUB_ASSIGN";
name2id["MOD_ASSIGN"]= 128;
id2name[128]= "MOD_ASSIGN";
name2id["STRING_LITERAL"]= 129;
id2name[129]= "STRING_LITERAL";
name2id["XOR_ASSIGN"]= 130;
id2name[130]= "XOR_ASSIGN";
name2id["INT"]= 131;
id2name[131]= "INT";
name2id["DOUBLE"]= 132;
id2name[132]= "DOUBLE";
name2id["'/'"]= 133;
id2name[133]= "'/'";
name2id["FLOAT"]= 134;
id2name[134]= "FLOAT";
name2id["'-'"]= 135;
id2name[135]= "'-'";
name2id["'['"]= 136;
id2name[136]= "'['";
name2id["')'"]= 137;
id2name[137]= "')'";
name2id["CONTINUE"]= 138;
id2name[138]= "CONTINUE";
name2id["MUL_ASSIGN"]= 139;
id2name[139]= "MUL_ASSIGN";
name2id["NE_OP"]= 140;
id2name[140]= "NE_OP";
name2id["STATIC"]= 141;
id2name[141]= "STATIC";
name2id["LEFT_ASSIGN"]= 142;
id2name[142]= "LEFT_ASSIGN";
name2id["LONG"]= 143;
id2name[143]= "LONG";
name2id["INC_OP"]= 144;
id2name[144]= "INC_OP";
name2id["'+'"]= 145;
id2name[145]= "'+'";
name2id["'<'"]= 146;
id2name[146]= "'<'";
}

