/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : D:\\Users\\lxjiang\\Documents\\Research\\projects\\Deckard\\CodeInProgress\\src\\dot2d\\grammars\\DotC.g
 *     -                            On : 2012-10-18 04:17:28
 *     -                for the parser : DotCParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
DotCParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pDotCParser, which is returned from a call to DotCParserNew().
 *
 * The methods in pDotCParser are  as follows:
 *
 *  - 
 DotCParser_graph_return
      pDotCParser->graph(pDotCParser)
 *  - 
 DotCParser_graphModifier_return
      pDotCParser->graphModifier(pDotCParser)
 *  - 
 DotCParser_stmt_list_return
      pDotCParser->stmt_list(pDotCParser)
 *  - 
 DotCParser_stmt_return
      pDotCParser->stmt(pDotCParser)
 *  - 
 DotCParser_attr_stmt_return
      pDotCParser->attr_stmt(pDotCParser)
 *  - 
 DotCParser_attr_list_return
      pDotCParser->attr_list(pDotCParser)
 *  - 
 DotCParser_a_list_return
      pDotCParser->a_list(pDotCParser)
 *  - 
 DotCParser_attr_return
      pDotCParser->attr(pDotCParser)
 *  - 
 DotCParser_edge_stmt_return
      pDotCParser->edge_stmt(pDotCParser)
 *  - 
 DotCParser_node_subgraph_return
      pDotCParser->node_subgraph(pDotCParser)
 *  - 
 DotCParser_edgeRHS_return
      pDotCParser->edgeRHS(pDotCParser)
 *  - 
 DotCParser_node_stmt_return
      pDotCParser->node_stmt(pDotCParser)
 *  - 
 DotCParser_node_id_return
      pDotCParser->node_id(pDotCParser)
 *  - 
 DotCParser_port_return
      pDotCParser->port(pDotCParser)
 *  - 
 DotCParser_subgraph_return
      pDotCParser->subgraph(pDotCParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_DotCParser_H
#define _DotCParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct DotCParser_Ctx_struct DotCParser, * pDotCParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct DotCParser_graph_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    DotCParser_graph_return;



typedef struct DotCParser_graphModifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    DotCParser_graphModifier_return;



typedef struct DotCParser_stmt_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    DotCParser_stmt_list_return;



typedef struct DotCParser_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    DotCParser_stmt_return;



typedef struct DotCParser_attr_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    DotCParser_attr_stmt_return;



typedef struct DotCParser_attr_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    DotCParser_attr_list_return;



typedef struct DotCParser_a_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    DotCParser_a_list_return;



typedef struct DotCParser_attr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    DotCParser_attr_return;



typedef struct DotCParser_edge_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    DotCParser_edge_stmt_return;



typedef struct DotCParser_node_subgraph_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    DotCParser_node_subgraph_return;



typedef struct DotCParser_edgeRHS_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    DotCParser_edgeRHS_return;



typedef struct DotCParser_node_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    DotCParser_node_stmt_return;



typedef struct DotCParser_node_id_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    DotCParser_node_id_return;



typedef struct DotCParser_port_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    DotCParser_port_return;



typedef struct DotCParser_subgraph_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    DotCParser_subgraph_return;




/** Context tracking structure for 
DotCParser

 */
struct DotCParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     DotCParser_graph_return
     (*graph)	(struct DotCParser_Ctx_struct * ctx);

     DotCParser_graphModifier_return
     (*graphModifier)	(struct DotCParser_Ctx_struct * ctx);

     DotCParser_stmt_list_return
     (*stmt_list)	(struct DotCParser_Ctx_struct * ctx);

     DotCParser_stmt_return
     (*stmt)	(struct DotCParser_Ctx_struct * ctx);

     DotCParser_attr_stmt_return
     (*attr_stmt)	(struct DotCParser_Ctx_struct * ctx);

     DotCParser_attr_list_return
     (*attr_list)	(struct DotCParser_Ctx_struct * ctx);

     DotCParser_a_list_return
     (*a_list)	(struct DotCParser_Ctx_struct * ctx);

     DotCParser_attr_return
     (*attr)	(struct DotCParser_Ctx_struct * ctx);

     DotCParser_edge_stmt_return
     (*edge_stmt)	(struct DotCParser_Ctx_struct * ctx);

     DotCParser_node_subgraph_return
     (*node_subgraph)	(struct DotCParser_Ctx_struct * ctx);

     DotCParser_edgeRHS_return
     (*edgeRHS)	(struct DotCParser_Ctx_struct * ctx);

     DotCParser_node_stmt_return
     (*node_stmt)	(struct DotCParser_Ctx_struct * ctx);

     DotCParser_node_id_return
     (*node_id)	(struct DotCParser_Ctx_struct * ctx);

     DotCParser_port_return
     (*port)	(struct DotCParser_Ctx_struct * ctx);

     DotCParser_subgraph_return
     (*subgraph)	(struct DotCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred8_DotC)	(struct DotCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred9_DotC)	(struct DotCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred10_DotC)	(struct DotCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred18_DotC)	(struct DotCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred22_DotC)	(struct DotCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred28_DotC)	(struct DotCParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred33_DotC)	(struct DotCParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct DotCParser_Ctx_struct * ctx);
    void	    (*free)   (struct DotCParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pDotCParser DotCParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pDotCParser DotCParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define A      4
#define ALPHACHAR      5
#define ATTR      6
#define ATTR_LIST      7
#define B      8
#define C      9
#define COLON      10
#define COMMA      11
#define COMMENT      12
#define C_BRACKET      13
#define C_SQR_BRACKET      14
#define D      15
#define DIGRAPH      16
#define E      17
#define EDGE      18
#define EDGEOP      19
#define EDGE_STMT      20
#define EQUAL      21
#define ESCAPE_SEQUENCE      22
#define F      23
#define G      24
#define GRAPH      25
#define GRAPH_ROOT      26
#define H      27
#define HTMLSTR      28
#define I      29
#define ID      30
#define J      31
#define K      32
#define L      33
#define LINE_COMMENT      34
#define LPAREN      35
#define M      36
#define N      37
#define NEWLINE      38
#define NODE      39
#define NODE_STMT      40
#define NUMBER      41
#define O      42
#define O_BRACKET      43
#define O_SQR_BRACKET      44
#define P      45
#define Q      46
#define QUOTEDSTR      47
#define R      48
#define RPAREN      49
#define S      50
#define SEMI_COLON      51
#define STMT_LIST      52
#define STR      53
#define STRICT      54
#define SUBGRAPH      55
#define SUBGRAPH_ROOT      56
#define T      57
#define U      58
#define V      59
#define VALIDSTR      60
#define W      61
#define WS      62
#define X      63
#define Y      64
#define Z      65
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for DotCParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
