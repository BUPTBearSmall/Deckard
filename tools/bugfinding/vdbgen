#!/bin/bash

clean()
{
	find $SRC_DIR/ -iname '*.vec' -print0 | xargs -0 -r --max-args 500 rm
}

#vgen $1 $2: $1=min_token; $2=stride
vgen()
{
	if (($# != 2));
	then
		return 1
	fi

	if [[ -s $VECTOR_DIR/vdb_$1_$2 ]];
	then
	  echo "Vec file $VECTOR_DIR/vdb_$1_$2 has already existed."
	  echo "    Delete it first if want re-generation."
	else
	  clean

	  echo $1 > param
	  echo $2 >> param
	  echo 1 >> param

	  echo > log

#NOTE: "for .. in .." has trouble when a filename contains spaces, use "while read .." instead:
	  ( time \
	    find $SRC_DIR/ -iname "$FILE_PATTERN" | while read file;
#	    for file in `find $SRC_DIR/ -iname "$FILE_PATTERN"`;
	    do
		echo "$file" >> log
		if [[ ! -e "${file}.vec" ]];
		then
			$VGEN_EXEC "$file" param >& /dev/null ||
			echo "failed($?): $VGEN_EXEC $file" >> error.log
		fi
	    done \
	  ) 2> $TIME_DIR/vgen_$1_$2

	  rm param
	  find $SRC_DIR/ -iname '*.vec' -print0 | xargs -0 --max-args=100 cat > $VECTOR_DIR/vdb_$1_$2

# transform to html:
	  echo "Transforming source code to html.........."
	  ( time \
	    find $SRC_DIR/ -iname "$FILE_PATTERN" | while read file;
	    do
		if [[ ! -e "${file}.html" ]];
		then
			source-highlight --line-number-ref "$file"
		fi
	    done \
	  ) 2> $TIME_DIR/source-highlight
	fi

# We'll group vectors based the $DISTANCE, instead of doing in here. So exit:
	return 0

}


. `dirname $0`/configure
echo "$VGEN_EXEC $FILE_PATTERN"

echo > error.log
export PATH=$PATH:~
echo $PATH
for t in ${MIN_TOKENS};
do
	for s in ${STRIDE};
	do
		echo "Vgen: $t $s";
		vgen $t $s
	done
done

